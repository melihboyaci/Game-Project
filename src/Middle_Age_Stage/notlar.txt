Bunun için “çarpışma tespiti”nden sonra iki objenin birbirinin içine girmesini engelleyecek bir “çarpışma çözümleme” (collision resolution) aşaması ekleyeceğiz. Yani, eğer iki rect üst üste biniyorsa — hem oyuncu‐düşman, hem de duvar‐oyuncu olabilir — en az müdahale ile birbirlerinden iteceğiz.

Aşağıda senin Player sınıfına ekleyebileceğin, iki dikdörtgeni birbirinden ayıran (push‑out) bir yardımcı metot var. Bunu Enemy için de benzer şekilde kullanabilirsin.

python
Kopyala
Düzenle
class Player:
    …

    def resolve_collision(self, other_rect):
        """Eğer self.rect ile other_rect çakışıyorsa, 
           overlap eksenine göre en kısa yoldan ayır."""
        if not self.rect.colliderect(other_rect):
            return

        # Çakışan bölge
        overlap = self.rect.clip(other_rect)

        # Hangi eksende daha az çakışma var?
        if overlap.width < overlap.height:
            # x ekseninde ayır
            if self.rect.centerx < other_rect.centerx:
                self.x -= overlap.width
            else:
                self.x += overlap.width
        else:
            # y ekseninde ayır
            if self.rect.centery < other_rect.centery:
                self.y -= overlap.height
            else:
                self.y += overlap.height

        # Yeni x,y değerlerini rect’e yansıt
        self.rect.center = (self.x, self.y)
Nerede çağırmalı?
1) Düşmanlarla çarpışma
Main loop’unda veya game controller’da, her frame’den hemen sonra:

python
Kopyala
Düzenle
player.update()  
for e in enemies:
    e.update(player)
    # Enemy ile player birbirine girerse itiştir:
    player.resolve_collision(e.rect)
    e.resolve_collision(player.rect)
2) Duvar/tile çarpışması
Eğer haritadaki katı (solid) tile’ların rect listesi varsa:

python
Kopyala
Düzenle
player.update()
for wall_rect in solid_tiles:
    player.resolve_collision(wall_rect)
aynı mantıkla Enemy için de.

Sonuç
Bu “push‑out” metodu sayesinde, iki objenin overlap ettiği anda birbirini iterek dışarı çıkartacağız. Böylece görsel olarak iç içe geçme (“çok çirkin” dediğin) ortadan kalkacak.
Aynı kodu Enemy sınıfına da ekleyip, Enemy.update()’den sonra self.resolve_collision(player.rect) dersen, düşman da üst üste bindiğinizde geri itilecektir.

Bu yapıyı entegre edip dener misin? Başka bir sorun kalırsa yine çözeriz!











    #Eski versiyon

    def handle_input(self):
        TILE_SIZE = 32
        # eğer hurt durumundaysa ve 300 ms dolmadıysa
        if self.state == "hurt" and pygame.time.get_ticks() - self.hurt_timer < 300:
            return     # hiçbir input işleme, animasyon da update() içinde kalacak

        keys = pygame.key.get_pressed()
        moving = False
        now = pygame.time.get_ticks()
        self.rect.center = (self.x, self.y)
        # Ekrandan taşmaması için sınırları ayarla
        if self.x < 0:
            self.x = 0
        elif self.x > 1280 - self.rect.width:
            self.x = 1280 - self.rect.width
        if self.y < 0:
            self.y = 0
        elif self.y > 720 - self.rect.height:
            self.y = 720 - self.rect.height
        self.rect.center = (self.x, self.y)

        # Hareket inputları
        if keys[pygame.K_w]:
            self.y -= self.speed
            moving = True
        if keys[pygame.K_s]:
            self.y += self.speed
            moving = True
        if keys[pygame.K_a]:
            self.x -= self.speed
            self.direction = "left"
            moving = True
        if keys[pygame.K_d]:
            self.x += self.speed
            self.direction = "right"
            moving = True

        # Attack inputları
        for attack_name, key in self.attack_keys.items():
            if keys[key] and now - self.last_attack_time[attack_name] > self.attack_cooldowns[attack_name]:
                self.state = attack_name
                self.frame_index = 0
                self.frame_timer = now
                self.last_attack_time[attack_name] = now
                self.attack_message = f"{attack_name.upper()} kullanıldı!"
                print(f"{attack_name} kullanıldı! Hasar: {self.attack_damage[attack_name]}")
                return  # aynı anda başka hareket yapmasın

        # Eğer saldırıda değilse, yürüme veya idle state'e geç
        if self.state.startswith("attack"):
            return

        if moving:
            self.state = "walk"
        else:
            self.state = "idle"







//Uyarı: Enemy class için hareket takılması sorunu var bu kodda

def update(self, player, solid_rects, all_characters):
        # Eğer 'death' durumundaysa, animasyonu tamamla ve oyundan kaldır
        if self.state == "death":
            if self.frame_index >= len(self.animations["death"][self.direction]) - 1:
                print("Enemy öldü ve oyundan kaldırılıyor.")
                self.die()
                return
            else:
                self.update_animation()
                return

        # Eğer 'hurt' durumundaysa, başka bir duruma geçme
        if self.state == "hurt":
            if pygame.time.get_ticks() - self.hurt_timer < 500:
                self.update_animation()
                return
            else:
                self.state = "idle"

        # Player ile aradaki mesafe
        dx = player.x - self.x
        dy = player.y - self.y
        distance = (dx * dx + dy * dy) ** 0.5

        # Yön belirle
        self.direction = "right" if dx > 0 else "left"

        # Saldırı menzili kontrolü
        if self.get_collision_rect().colliderect(player.get_collision_rect()):
            self.attack(player)
        else:
            # menzil dışındaysa yürüsün
            # --- X ekseni için ayrı kontrol ---
            move_x = 0
            if abs(dx) > 1:
                norm = max(1, distance)
                step_x = self.speed * dx / norm
                next_hitbox_x = self.get_hitbox_rect().move(step_x, 0)
                can_move_x = True
                for rect in solid_rects:
                    if next_hitbox_x.colliderect(rect):
                        can_move_x = False
                        break
                if can_move_x:
                    for other in all_characters:
                        if other is self:
                            continue
                        if next_hitbox_x.colliderect(other.get_hitbox_rect()):
                            can_move_x = False
                            break
                if can_move_x:
                    self.x += step_x

            # --- Y ekseni için ayrı kontrol ---
            move_y = 0
            if abs(dy) > 1:
                norm = max(1, distance)
                step_y = self.speed * dy / norm
                next_hitbox_y = self.get_hitbox_rect().move(0, step_y)
                can_move_y = True
                for rect in solid_rects:
                    if next_hitbox_y.colliderect(rect):
                        can_move_y = False
                        break
                if can_move_y:
                    for other in all_characters:
                        if other is self:
                            continue
                        if next_hitbox_y.colliderect(other.get_hitbox_rect()):
                            can_move_y = False
                            break
                if can_move_y:
                    self.y += step_y

            # Hareket ettiyse state'i güncelle
            if (abs(dx) > 1 and can_move_x) or (abs(dy) > 1 and can_move_y):
                self.state = "walk"
            else:
                self.state = "idle"

        self.rect.center = (self.x, self.y)
        self.update_animation()            